<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE niftoolsxml>
<niftoolsxml version="0.7.1.0">

    <version id="ZTUAC" version="17">Zoo Tycoon Ultimate Animal Collection</version>
    <version id="PC" version="18">Planet Coaster</version>
    <version id="PZ" version="19" user_version="8340 8724">Planet Zoo</version>
    <version id="JWE" version_flag="1" version="19" user_version="24724 25108">Jurassic World Evolution</version>
    <version id="ED" version_flag="8" version="19" user_version="24724 25108">Elite Dangerous</version>

    <token name="verexpr" attrs="vercond cond">
        Commonly used version expressions.
        <verexpr token="#ZTUAC#" string="(#VER# #EQ# 17)">ZTUAC</verexpr>
		<verexpr token="#PC#" string="(#VER# #EQ# 18)">PC</verexpr>
        <verexpr token="#PZ#" string="(((#USER# #EQ# 8340) #OR# (#USER# #EQ# 8724)) #AND# (#VER# #EQ# 19))">PZ</verexpr>
        <verexpr token="#JWE#" string="(((#USER# #EQ# 24724) #OR# (#USER# #EQ# 25108)) #AND# (#VER# #EQ# 19) #AND# (#FLAG# #EQ# 1))">JWE, 25108 is JWE on switch</verexpr>
        <verexpr token="#ED#" string="(((#USER# #EQ# 24724) #OR# (#USER# #EQ# 25108)) #AND# (#VER# #EQ# 19) #AND# (#FLAG# #EQ# 8))">ED</verexpr>
    </token>

    <token name="global" attrs="vercond cond">
        Global Tokens.
        NOTE: These must be listed after the above tokens so that they replace last. For example, `verexpr` uses these tokens.
        <global token="#USER#" string="user_version" />
        <global token="#VER#" string="version" />
        <global token="#FLAG#" string="version_flag" />
    </token>
	
    <token name="operator" attrs="cond vercond arr1 arr2 arg">
        All Operators except for unary not (!), parentheses, and member of (\)
        NOTE: These can be ignored entirely by string substitution and dealt with directly.
        NOTE: These must be listed after the above tokens so that they replace last. For example, `verexpr` uses these tokens.
        <operator token="#ADD#" string="+" />
        <operator token="#SUB#" string="-" />
        <operator token="#MUL#" string="*" />
        <operator token="#DIV#" string="/" />
        <operator token="#AND#" string="&amp;&amp;" />
        <operator token="#OR#" string="||" />
        <operator token="#LT#" string="&lt;" />
        <operator token="#GT#" string="&gt;" />
        <operator token="#LTE#" string="&lt;=" />
        <operator token="#GTE#" string="&gt;=" />
        <operator token="#EQ#" string="==" />
        <operator token="#NEQ#" string="!=" />
        <operator token="#RSH#" string="&gt;&gt;" />
        <operator token="#LSH#" string="&lt;&lt;" />
        <operator token="#BITAND#" string="&amp;" />
        <operator token="#BITOR#" string="|" />
        <operator token="#MOD#" string="%" />
    </token>

    <basic name="bool" count="1">
        An unsigned 8-bit integer.
    </basic>
    <basic name="byte" count="1">
        An unsigned 8-bit integer.
    </basic>
    <basic name="ubyte" count="1">
        An unsigned 8-bit integer.
    </basic>

    <basic name="uint64" count="1">
        An unsigned 64-bit integer.
    </basic>
    <basic name="uint" count="1">
        An unsigned 32-bit integer.
    </basic>
    <basic name="ushort" count="1" >
        An unsigned 16-bit integer.
    </basic>

    <basic name="int" count="1" >
        A signed 32-bit integer.
    </basic>

    <basic name="short" count="1" >
        A signed 16-bit integer.
    </basic>
	
    <basic name="char" count="0" >
        An 8-bit character.
    </basic>
	
    <basic name="float" count="0" >
        A standard 32-bit floating point number.
    </basic>

    <basic name="ZString">
        Null terminated string.
    </basic>

    <bitfield name="VersionInfo" storage="uint">
        Determines the format of the OVL file held by a mesh.
        n.b. pos counts from the end!
        <member width="1" pos="2" name="unk1" type="bool"></member>
        <member width="1" pos="4" name="unk2" type="bool"></member>
        <member width="1" pos="7" name="use zlib" type="bool"></member>
        <member width="1" pos="9" name="use oodle" type="bool"></member>
        <member width="1" pos="13" name="unk3" type="bool"></member>
        <member width="1" pos="14" name="is jwe" type="bool"></member>
    </bitfield>

	<!-- Structs for the OVL file -->

    <compound name="ZStringBuffer" count="0" >
        Holds a buffer of zero-terminated strings
    </compound>

    <compound name="FixedString" count="0" >
        Holds a string of a fixed size, given as an argument.
    </compound>

    <compound name="Header">
        Found at the beginning of every OVL file
        <add name="magic" type="FixedString" arg="4">'VOXE'</add>
        <add name="version flag" type="byte" >if 0x08 then 64bit, differentiates between ED and JWE, 0x08 for ED and PC</add>
        <add name="version" type="byte" >0x12 = PC, 0x13 = JWE, PZ</add>
        <add name="Bitswap" type="byte" >endianness?, usually zero</add>
        <add name="Seventh Byte" type="byte" default="1" >always = 1</add>
        <add name="user version" type="VersionInfo" >determines compression format (none, zlib or oodle) and apparently type of data (additional fields)</add>

        <add name="info" type="SizedStrData" >always = 0</add>
<!--        <add name="heightmap" type="float" arr1="info \ x" arr2="info \ y">heightmap</add>-->
<!--        <add name="weights" type="ubyte" arr1="info \ x * info \ y" arr2="4" vercond="#PC#">weight indices</add>-->
<!--        <add name="weights" type="ubyte" arr1="4" arr2="info \ x * info \ y"  vercond="!#PC#">weight indices</add>-->
<!--        <add name="weights" type="ubyte" arr1="info \ x * info \ y / 16" arr2="4" vercond="!#PC#">weight indices</add>-->
<!--        157632 unaccounted bytes -->
<!--        <add name="unk" type="float" arr1="39408">unk</add>-->
<!--        <add name="stuff" type="BufferEndData" arr1="info \ count"></add>-->
<!--        if some count-->
<!--        <add name="names" type="ZString" arr1="info \ name count"></add>-->
<!--        padding-->
<!--        <add name="name stuff" type="uint64" arr1="info \ name count"></add>-->

    </compound>

    <compound name="SizedStrData">
        # JWE
        <add name="zero" type="uint64" ></add>
        <add name="data size" type="uint64" >total size of buffer data</add>
        <add name="x" type="uint64" ></add>
        <add name="y" type="uint64" ></add>
        <add name="scale" type="float"></add>
        <add name="padding" type="float" ></add>
        <add name="data offset" type="uint64" vercond="!#PC#"></add>
        <add name="data count" type="uint64" vercond="!#PC#">entries of 32 bytes</add>
        <add name="size offset" type="uint64" vercond="!#PC#"></add>
        <add name="size count" type="uint64" vercond="!#PC#">entries of 40 bytes</add>

        <add name="unk1 offset" type="uint64" >slightly smaller than total size of buffer data</add>
        <add name="unk1 count" type="uint64" >counts the -1 structs; entries of 32 bytes</add>
        <add name="unk2 offset" type="uint64" >offset into buffer to start of sth; only given if some count is nonzero</add>
        <add name="unk2 count" type="uint64" ></add>
        <add name="name buffer offset" type="uint64" >offset into buffer to start of name zstrings</add>
        <add name="name count" type="uint64" >also counts the stuff after names</add>

    </compound>

    <compound name="SizedStrDataOld">
        # 104 bytes
        <add name="zero" type="uint64" ></add>
        <add name="data size" type="uint64" >total size of buffer data</add>
        <add name="x" type="uint64" ></add>
        <add name="y" type="uint64" ></add>
        <add name="height" type="float"></add>
        <add name="zero float" type="float" ></add>
<!--        above is congruent-->

<!--        PC only-->
        <add name="zero pc" type="uint64" vercond="#PC#">zero, for PC only</add>
        <add name="height array size pc" type="uint64" vercond="#PC#" >x*y*4, for PC only</add>

<!--        PZ, JWE only-->
        <add name="extra offset" type="uint64" vercond="!#PC#"></add>
        <add name="extra count" type="uint64" vercond="!#PC#">entries of 32 bytes</add>
        <add name="another offset" type="uint64" vercond="!#PC#"></add>
        <add name="another count" type="uint64" vercond="!#PC#">entries of 40 bytes</add>

<!--        below is congruent-->
        <add name="data offset" type="uint64" >slightly smaller than total size of buffer data</add>
        <add name="data count" type="uint64" >counts the -1 structs; entries of 32 bytes</add>
        <add name="some offset" type="uint64" >offset into buffer to start of sth; only given if some count is nonzero</add>
        <add name="some count" type="uint64" ></add>
        <add name="name buffer offset" type="uint64" >offset into buffer to start of name zstrings</add>
        <add name="name count" type="uint64" >also counts the stuff after names</add>

    </compound>

    <compound name="Data">
        <add name="id" type="uint64" />
        <add name="type" type="uint64" ></add>
        <add name="offset" type="uint64" ></add>
        <add name="dsize" type="uint64" ></add>
    </compound>

    <compound name="Size">
        <add name="id" type="uint64" />
        <add name="width 1" type="uint64" ></add>
        <add name="height 1" type="uint64" ></add>
        <add name="width 2" type="uint64" ></add>
        <add name="height 2" type="uint64" ></add>
    </compound>

    <compound name="BufferEndData">
        <add name="size of height and weights" type="uint64" >in bytes</add>
        <add name="unk" type="uint64" ></add>
        <add name="index" type="uint64" ></add>
        <add name="ff" type="uint64" ></add>
    </compound>

</niftoolsxml>
