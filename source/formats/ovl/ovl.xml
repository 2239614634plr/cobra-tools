<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE niftoolsxml>
<niftoolsxml version="0.7.1.0">

    <version id="DLA" version="15">Disneyland Adventure</version>
    <version id="ZTUAC" version="17">Zoo Tycoon Ultimate Animal Collection</version>
    <version id="PC" version="18">Planet Coaster</version>
    <version id="PZ" version="19" user_version="8340 8724">Planet Zoo</version>
    <version id="JWE" version="19" user_version="24724 25108">Jurassic World Evolution</version>

    <token name="verexpr" attrs="vercond cond">
        Commonly used version expressions.
        <verexpr token="#DLA#" string="(#VER# #EQ# 15)">Disneyland Adventure</verexpr>
        <verexpr token="#ZTUAC#" string="(#VER# #EQ# 17)">ZTUAC</verexpr>
		<verexpr token="#PC#" string="(#VER# #EQ# 18)">PC</verexpr>
        <verexpr token="#PZ#" string="(((#USER# #EQ# 8340) #OR# (#USER# #EQ# 8724)) #AND# (#VER# #EQ# 19))">PZ</verexpr>
        <verexpr token="#JWE#" string="(((#USER# #EQ# 24724) #OR# (#USER# #EQ# 25108)) #AND# (#VER# #EQ# 19))">JWE, 25108 is JWE on switch</verexpr>
    </token>

    <token name="global" attrs="vercond cond">
        Global Tokens.
        NOTE: These must be listed after the above tokens so that they replace last. For example, `verexpr` uses these tokens.
        <global token="#USER#" string="user_version" />
        <global token="#VER#" string="version" />
        <global token="#FLAG#" string="version_flag" />
    </token>
	
    <token name="operator" attrs="cond vercond arr1 arr2 arg">
        All Operators except for unary not (!), parentheses, and member of (\)
        NOTE: These can be ignored entirely by string substitution and dealt with directly.
        NOTE: These must be listed after the above tokens so that they replace last. For example, `verexpr` uses these tokens.
        <operator token="#ADD#" string="+" />
        <operator token="#SUB#" string="-" />
        <operator token="#MUL#" string="*" />
        <operator token="#DIV#" string="/" />
        <operator token="#AND#" string="&amp;&amp;" />
        <operator token="#OR#" string="||" />
        <operator token="#LT#" string="&lt;" />
        <operator token="#GT#" string="&gt;" />
        <operator token="#LTE#" string="&lt;=" />
        <operator token="#GTE#" string="&gt;=" />
        <operator token="#EQ#" string="==" />
        <operator token="#NEQ#" string="!=" />
        <operator token="#RSH#" string="&gt;&gt;" />
        <operator token="#LSH#" string="&lt;&lt;" />
        <operator token="#BITAND#" string="&amp;" />
        <operator token="#BITOR#" string="|" />
        <operator token="#MOD#" string="%" />
    </token>

    <basic name="bool" count="1">
        An unsigned 8-bit integer.
    </basic>
    <basic name="byte" count="1">
        An unsigned 8-bit integer.
    </basic>
    <basic name="ubyte" count="1">
        An unsigned 8-bit integer.
    </basic>

    <basic name="uint64" count="1">
        An unsigned 64-bit integer.
    </basic>
    <basic name="uint" count="1">
        An unsigned 32-bit integer.
    </basic>
    <basic name="ushort" count="1" >
        An unsigned 16-bit integer.
    </basic>

    <basic name="int" count="1" >
        A signed 32-bit integer.
    </basic>

    <basic name="short" count="1" >
        A signed 16-bit integer.
    </basic>
	
    <basic name="char" count="0" >
        An 8-bit character.
    </basic>
	
    <basic name="float" count="0" >
        A standard 32-bit floating point number.
    </basic>

    <bitfield name="VersionInfo" storage="uint">
        Determines the format of the OVL file held by a mesh.
        n.b. pos counts from the end!
        <member width="1" pos="2" name="unk1" type="bool"></member>
        <member width="1" pos="4" name="unk2" type="bool"></member>
        <member width="1" pos="7" name="use zlib" type="bool"></member>
        <member width="1" pos="9" name="use oodle" type="bool"></member>
        <member width="1" pos="13" name="unk3" type="bool"></member>
        <member width="1" pos="14" name="is jwe" type="bool"></member>
    </bitfield>

	<!-- Structs for the OVL file -->

    <compound name="ZStringBuffer" count="0" >
        Holds a buffer of zero-terminated strings
    </compound>

    <compound name="FixedString" count="0" >
        Holds a string of a fixed size, given as an argument.
    </compound>


    <compound name="GenericHeader">
        Found at the beginning of every OVL file
        <add name="FRES" type="FixedString" arg="4">'FRES'</add>
        <add name="version flag" type="byte" >if 0x08 then 64bit, 0x01 for JWE, PZ, 0x08 for PC, 0x48 for JWE Switch, may be platform</add>
        <add name="version" type="byte" >0x12 = PC, 0x13 = JWE, PZ</add>
        <add name="Bitswap" type="byte" >endianness?, usually zero</add>
        <add name="Seventh Byte" type="byte" default="1" >always = 1</add>
        <add name="user version" type="VersionInfo" >determines compression format (none, zlib or oodle) and apparently type of data (additional fields)</add>
    </compound>

    <compound name="Header" inherit="GenericHeader">
        Found at the beginning of every OVL file
        <add name="Lod Depth" type="uint" >Seems to match the number of LOD models for the file (has more than 1 file)</add>
        <add name="Len Names" type="uint" >length of the Names block below, including 00 bytes</add>
        <add name="Zero 2" type="uint" >always = 0</add>

        <add name="Num Aux Entries" type="uint" >count of external aux files, ie audio banks</add>
        <add name="Num Dirs" type="ushort" >count of directories</add>
        <add name="Num Mimes" type="ushort" >count of file mime types, aka. extensions with metadata</add>
        <add name="Num Files" type="uint" >count of files</add>
        <add name="Num Files 2" type="uint" >repeat count of files ??</add>
        <add name="Num Dependencies" type="uint" >count of parts</add>
        <add name="Num Archives" type="uint" >number of archives</add>

        <add name="num_pool_types" type="uint" >number of pool_types across all archives</add>
        <add name="num_pools" type="uint" >number of headers of all types across all archives</add>
        <add name="Num Datas" type="uint" >number of DataEntries across all archives</add>
        <add name="Num Buffers" type="uint" >number of BufferEntries across all archives</add>
        <add name="Num Files OVS" type="uint" >number of files in external OVS archive</add>
        <add name="ztuac unk 0" type="uint" >used in ZTUAC elephants</add>
        <add name="ztuac unk 1" type="uint" >used in ZTUAC elephants</add>
        <add name="ztuac unk 2" type="uint" >used in ZTUAC elephants</add>
        <add name="Len Archive Names" type="uint" >length of archive names</add>
        <add name="Num Files 3" type="uint" >another Num Files</add>
        <add name="Len Type Names" type="uint" >length of the type names portion insideNames block (usually at the start), not counting 00 bytes</add>
        <add name="Reserved" type="uint" arr1="13">52 bytes zeros</add>

		<!-- end of fixed header structure -->
        <add name="Names" type="ZStringBuffer" arg="Len Names">Name buffer for assets and file mime types.</add>
        <add name="Mimes" type="MimeEntry" arr1="Num Mimes">Array of MimeEntry objects that represent a mime type (file extension) each. </add>
        <add name="Files" type="FileEntry" arr1="Num Files">Array of FileEntry objects.</add>
        <add name="Archive Names" type="ZStringBuffer" arg="Len Archive Names">Name buffer for archives, usually will be STATIC followed by any OVS names</add>
        <add name="Archives" type="ArchiveEntry" arr1="Num Archives">Array of ArchiveEntry objects.</add>
        <add name="Dirs" type="DirEntry" arr1="Num Dirs">Array of DirEntry objects.</add>
        <add name="Dependencies" type="DependencyEntry" arr1="Num Dependencies">aka InstancesArray of DependencyEntry objects.</add>
        <add name="Aux Entries" type="AuxEntry" arr1="Num Aux Entries">Array of AuxEntry objects.</add>
        <add name="Unknowns" type="UnknownEntry" arr1="Num Files OVS">Array of UnknownEntry objects.</add>
		<add name="Zlibs" type="ZlibInfo" arr1="Num Archives">repeats by archive count</add>
    </compound>

    <compound name="ZlibInfo" >
        Description of one zlib archive
        <add name="Zlib thing1" type="uint">seemingly unused in JWE</add>
        <add name="Zlib thing2" type="uint">seemingly unused in JWE, subtracting this from ovs uncompressed_size to get length of the uncompressed ovs header</add>
    </compound>

    <compound name="MimeEntry" >
        Description of one mime type, which is sort of a container for
		Note that for JWE at least, inside the archive not the stored mime hash is used but the extension hash, has to be generated, eg. djb("bani") == 2090104799
        <add name="Offset" type="uint">offset in the header's Names block</add>
        <add name="unknown" type="uint">usually zero</add>
        <add name="Mime Hash" type="uint">changes with game version; hash of this file extension; same across all files, but seemingly not used anywhere else in the archive</add>
        <add name="version" type="uint" >usually increments with game</add>
		<add name="file index offset" type="uint">Id of this class type. Later in the file there is a reference to this Id; offset into FileEntry list in number of files</add>
        <add name="file count" type="uint">Number of entries of this class in the file.; from 'file index offset', this many files belong to this file extension</add>
    </compound>

    <compound name="FileEntry" >
        Description of one file in the archive
        <add name="Offset" type="uint">offset in the ovl's names block; start offset of zero terminated string</add>
        <add name="file hash" type="uint">this hash is used to retrieve the file name from inside the archive</add>
        <add name="unkn0" type="byte" >? constant per file type</add>
        <add name="unkn1" type="byte" >? constant per file type</add>
        <add name="Extension" type="ushort" >index into 'Extensions' array</add>
    </compound>

    <compound name="ArchiveEntry" >
        Description of one archive
        <add name="Offset" type="uint">offset in the ovl's Archive Names block</add>
        <add name="pools_offset" type="uint">starting index in ovl list of pools, this archive's pools continue for num_pools</add>
        <add name="ovs file offset" type="uint">starting index of file entries</add>
        <add name="num_pools" type="uint" >Total amount of pools in this archive; sum of all PoolType.num_pools</add>
        <add name="Num Datas" type="ushort" >Amount of Data Entries</add>
        <add name="num_pool_types" type="ushort" >Amount of PoolType objects at start of this deflated archive.</add>
        <add name="zeros" type="uint">?</add>
        <add name="Num Buffers" type="uint">Amount of buffers in the archive</add>
        <add name="Num Fragments" type="uint" >Amount of Fragments in the archive</add>
        <add name="Num Files" type="uint">Number of files in the archive</add>
        <add name="read start" type="uint">Seek to pos to get zlib header for this archive</add>
        <add name="set data size" type="uint" >size of the set and asset entry data</add>
        <add name="compressed_size" type="uint">size of the compressed data for this archive</add>
        <add name="uncompressed_size" type="uint" >size of the uncompressed data for this archive</add>
        <add name="zeros 3" type="uint">?</add>
        <add name="pools_start" type="uint">byte offset, cumulative size of all pools preceding this archive</add>
        <add name="pools_end" type="uint" >byte offset, sum of the archives header entry data blocks + the pools_start</add>
        <add name="file index offset" type="uint" vercond="#DLA#">doesn't work like that because order of ovl files is wrong! - files of this archive start here in ovl file list, + count num files</add>
        <add name="ovs offset" type="uint" vercond="!#DLA#" >Seemingly unused, can be zeroed without effect ingame in JWE</add>
    </compound>

    <compound name="OvsHeader" >
        Description of one archive's content
        <add name="pool_types" type="PoolType" arr1="#ARG#\num_pool_types"/>
        <add name="pools" type="MemPool" arr1="#ARG#\num_pools"/>
        <add name="data entries" type="DataEntry" arr1="#ARG#\Num Datas"/>
        <add name="buffer entries" type="BufferEntry" arr1="#ARG#\Num Buffers"/>
        <add name="sized str entries " type="SizedStringEntry" arr1="#ARG#\Num Files"/>
        <add name="fragments " type="Fragment" arr1="#ARG#\Num Fragments"/>
        <add name="set header " type="SetHeader"/>
    </compound>


    <compound name="DirEntry" >
        Description of one directory in the archive
        <add name="Offset" type="uint">offset in the header's Names block</add>
    </compound>

    <compound name="DependencyEntry" >
        Description of dependency; links it to an entry from this archive
        <add name="file hash" type="uint">Hash of this dependency, for lookup in hash dict. Can be either external or internal.</add>
        <add name="offset" type="uint" >offset for extension into string name table</add>
        <add name="file index" type="uint" >index into ovl file table, points to the file entry where this dependency is used</add>
        <add name="pointers" type="HeaderPointer" arr1="1" >pointer into flattened list of all archives' pools</add>
    </compound>

    <compound name="AuxEntry" >
        describes an external AUX resource
        <add name="file index" type="uint">index into files list</add>
        <add name="extension index" type="uint">maybe index into extension list</add>
        <add name="size" type="uint">byte count of the complete external resource file</add>
    </compound>

    <compound name="UnknownEntry" >
        Description of one file type
        <add name="unknowns" type="ushort" arr1="2" arr2="2">?</add>
        <add name="zero" type="uint"/>
    </compound>

	<!-- From here, structs are for the deflated stream -->

	<compound name="PoolType">
		Located at start of deflated archive stream
		<add name="Type" type="ushort" >Type of the headers that follow</add>
		<add name="num_pools" type="ushort" >Amount of the headers of that type that follow the headers block</add>
	</compound>

    <compound name="MemPool" >
        Description of one archive header entry
		<add name="zero1" type="uint64" vercond="!#DLA#">always 0</add>
		<add name="Size" type="uint">the number of bytes representing the text files data</add>
		<add name="Offset" type="uint">starting point to read text file data</add>
		<add name="zero2" type="uint64" vercond="#DLA#">always 0</add>
		<add name="File Hash" type="uint">DJB hash of the first file in the txt data block</add>
		<add name="Num Files" type="uint">unknown count (number of .txt files)</add>
		<add name="Ext Hash" type="uint" vercond="#JWE# #OR# #PZ#">JWE: DJB hash for extension, 0 for PZ</add>
		<add name="zero3" type="uint"  vercond="#JWE# #OR# #PZ#">always 0</add>
    </compound>
	
	<compound name="DataEntry" >
		32 bytes
		<add name="File Hash" type="uint"> DJB hash; sometimes matches an archive header's first File Hash</add>
		<add name="Ext Hash" type="uint" vercond="#JWE# #OR# #PZ#">DJB hash for extension; always (?) matches an archive header's hash</add>
		<add name="set index" type="ushort" >1-based indexing into set_header.sets; 0 if data is not part of a set</add>
		<add name="buffer count" type="ushort">number of buffers that should be read from list for this entry</add>
		<add name="zero" type="uint" vercond="#JWE# #OR# #PZ#"> </add>
		<add name="Size 1" type="uint64">size of first buffer, in the case of the ms2 the size 1 is the size of the first two buffers together</add>
		<add name="Size 2" type="uint64">size of last buffer; tex and texstream have all size here</add>
    </compound>

	<compound name="BufferEntry" >
		8 bytes
		<add name="Index" type="uint">apparently index of buffer in file, at least that's how it looks in barbasol - 0, 1, 2, 3, 4...</add>
		<add name="Size" type="uint">in bytes</add>
    </compound>
	
	<compound name="HeaderPointer" >
		Not standalone, used by SizedStringEntry, Fragment and DependencyEntry
		8 bytes
        <add name="pool_index" type="int" >The index of the MemPool this one relates to; OR, for entries referred to from AssetEntries: -1 (FF FF FF FF)</add>
        <add name="data offset" type="uint" >the byte offset relative to the start of the header entry data</add>
    </compound>
	
    <compound name="SizedStringEntry" >
        Main file entry in the ovs
        <add name="File Hash" type="uint">id (index or djb) of the file</add>
        <add name="Ext Hash" type="uint" vercond="#JWE# #OR# #PZ#">djb of extension</add>
        <add name="pointers" type="HeaderPointer" arr1="1" >one pointer OR -1 pointer for assets</add>
    </compound>
	
    <compound name="Fragment" >
		often huge amount of tiny files
        <add name="pointers" type="HeaderPointer" arr1="2" >points into header datas section</add>
    </compound>
	
	<compound name="SetHeader" >
		defines amount of sets and assets
		(not a struct in barbasol)
		<add name="set count" type="uint"> </add>
		<add name="asset count" type="uint"> </add>
		<add name="sig a" type="uint" default="1065336831">must be 1065336831</add>
		<add name="sig b" type="uint" default="16909320">must be 16909320</add>
		<add name="sets" type="SetEntry" arr1="set count"> </add>
		<add name="assets" type="AssetEntry" arr1="asset count"> </add>
    </compound>
	
	<compound name="SetEntry" >
		the asset indices of two consecutive SetEntries define a set of AssetEntries
		<add name="File Hash" type="uint"> sometimes matches an archive header's first File Hash</add>
		<add name="Ext Hash" type="uint"  vercond="#JWE# #OR# #PZ#">always (?) matches an archive header's hash</add>
		<add name="start" type="uint" >add from last set's entry up to this index to this set</add>
    </compound>
	
	<compound name="AssetEntry" >
		refers to sized string entries so they can be grouped into set entries.
		It seems to point exclusively to SizedStringEntry's whose Ext Hash is FF FF FF FF aka max uint32
		<add name="File Hash" type="uint"> sometimes matches an archive header's first File Hash</add>
		<add name="zero 0" type="uint" > </add>
		<add name="Ext Hash" type="uint"  vercond="#JWE# #OR# #PZ#">always (?) matches an archive header's hash</add>
		<add name="zero 1" type="uint"  vercond="#JWE# #OR# #PZ#"> </add>
		<add name="file index" type="uint" >index into sized string entries array; hash of targeted file matches this assetentry's hash.</add>
		<add name="zero 2" type="uint"></add>
    </compound>

	<!-- Sized str entries, give info about fragments -->
	<compound name="EnumnamerStrData" >
        per attribute
        <add name="unknown0" type="uint" >3 in driver</add>
        <add name="unknown1" type="uint" >0 in driver</add>
    </compound>
	
	<compound name="MotionGraphVarsStrData" >
        per attribute
        <add name="unknown0" type="uint" >4 in driver</add>
        <add name="unknown1" type="uint" >0 in driver</add>
    </compound>
	
	<compound name="ManisSizedStrData" >
        per attribute
        <add name="unknown0" type="ushort" >96 in driver</add>
        <add name="unknown1" type="ushort">272 in driver</add>
        <add name="unknown2" type="uint" arr1="5" >zeros in driver</add>
    </compound>

</niftoolsxml>
