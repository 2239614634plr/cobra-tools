<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE fileformat>
<fileformat>

    <version id="DLA" version="15">Disneyland Adventure</version>
    <version id="ZTUAC" version="17">Zoo Tycoon Ultimate Animal Collection</version>
    <version id="PC" version="18">Planet Coaster</version>
    <version id="PZ" version="19 20" user_version="8340 8724">Planet Zoo</version>
    <version id="PZ16" version="20" user_version="8340 8724">Planet Zoo 1.6</version>
    <version id="JWE" version="19" user_version="24724 25108">Jurassic World Evolution</version>

    <token name="verexpr" attrs="vercond">
        Commonly used version expressions.
        <verexpr token="#DLA#" string="(#VER# #EQ# 15)">Disneyland Adventure</verexpr>
        <verexpr token="#ZTUAC#" string="(#VER# #EQ# 17)">ZTUAC</verexpr>
		<verexpr token="#PC#" string="(#VER# #EQ# 18)">PC</verexpr>
        <verexpr token="#PZ#" string="(((#USER# #EQ# 8340) #OR# (#USER# #EQ# 8724)) #AND# (#VER# #GTE# 19))">PZ</verexpr>
        <verexpr token="#PZ16#" string="(#VER# #EQ# 20)">PZ</verexpr>
        <verexpr token="#JWE#" string="(((#USER# #EQ# 24724) #OR# (#USER# #EQ# 25108)) #AND# (#VER# #EQ# 19))">JWE, 25108 is JWE on switch</verexpr>
    </token>

    <token name="global" attrs="vercond">
        Global Tokens.
        NOTE: These must be listed after the above tokens so that they replace last. For example, `verexpr` uses these tokens.
        <global token="#USER#" string="user_version" />
        <global token="#VER#" string="version" />
        <global token="#FLAG#" string="version_flag" />
    </token>

    <token name="operator" attrs="cond vercond arr1 arr2 arg">
        All Operators except for unary not (!), parentheses, and member of (\)
        NOTE: These can be ignored entirely by string substitution and dealt with directly.
        NOTE: These must be listed after the above tokens so that they replace last. For example, `verexpr` uses these tokens.
        <operator token="#ADD#" string="+" />
        <operator token="#SUB#" string="-" />
        <operator token="#MUL#" string="*" />
        <operator token="#DIV#" string="/" />
        <operator token="#AND#" string="&amp;&amp;" />
        <operator token="#OR#" string="||" />
        <operator token="#LT#" string="&lt;" />
        <operator token="#GT#" string="&gt;" />
        <operator token="#LTE#" string="&lt;=" />
        <operator token="#GTE#" string="&gt;=" />
        <operator token="#EQ#" string="==" />
        <operator token="#NEQ#" string="!=" />
        <operator token="#RSH#" string="&gt;&gt;" />
        <operator token="#LSH#" string="&lt;&lt;" />
        <operator token="#BITAND#" string="&amp;" />
        <operator token="#BITOR#" string="|" />
        <operator token="#MOD#" string="%" />
    </token>

    <basic name="bool" count="1">
        An unsigned 8-bit integer.
    </basic>
    <basic name="byte" count="1">
        An unsigned 8-bit integer.
    </basic>
    <basic name="ubyte" count="1">
        An unsigned 8-bit integer.
    </basic>

    <basic name="uint64" count="1">
        An unsigned 64-bit integer.
    </basic>
    <basic name="uint" count="1">
        An unsigned 32-bit integer.
    </basic>
    <basic name="ushort" count="1" >
        An unsigned 16-bit integer.
    </basic>

    <basic name="int" count="1" >
        A signed 32-bit integer.
    </basic>

    <basic name="short" count="1" >
        A signed 16-bit integer.
    </basic>

    <basic name="char" count="0" >
        An 8-bit character.
    </basic>

    <basic name="float" count="0" >
        A standard 32-bit floating point number.
    </basic>


	<enum name="DdsType" storage="ubyte">
		maps the OVL's dds type to name of compression format
		<option value="35" name="DXGI_FORMAT_R8G8B8A8_UNORM"></option>
		<option value="37" name="DXGI_FORMAT_R8G8B8A8_UNORM_SRGB">gharial_male.pclut.dds, or DXGI_FORMAT_D24_UNORM_S8_UINT, DXGI_FORMAT_R8G8B8A8_UNORM</option>
		<option value="38" name="DXGI_FORMAT_D32_FLOAT_S8X24_UINT">atmospherics_stars_data.dds</option>
		<option value="43" name="DXGI_FORMAT_R16G16_FLOAT"></option>
		<!-- <option value="59" name="?"></option> -->

		<option value="78" name="DXGI_FORMAT_BC1_UNORM"></option>
		<option value="79" name="DXGI_FORMAT_BC1_UNORM_SRGB"></option>
		<option value="80" name="DXGI_FORMAT_BC2_UNORM"></option>
		<option value="81" name="DXGI_FORMAT_BC2_UNORM_SRGB"></option>
		<option value="82" name="DXGI_FORMAT_BC3_UNORM">PZ wolf baldnessscars texture</option>
		<option value="83" name="DXGI_FORMAT_BC3_UNORM_SRGB"></option>
		<option value="84" name="DXGI_FORMAT_BC4_UNORM"></option>
		<option value="85" name="DXGI_FORMAT_BC4_SNORM"></option>
		<option value="86" name="DXGI_FORMAT_BC5_UNORM"></option>
		<option value="87" name="DXGI_FORMAT_BC5_SNORM"></option>
		<option value="88" name="DXGI_FORMAT_BC6H_UF16">ptero aviary</option>
		<option value="89" name="DXGI_FORMAT_BC6H_SF16"></option>
		<option value="90" name="DXGI_FORMAT_BC7_UNORM"></option>
		<option value="91" name="DXGI_FORMAT_BC7_UNORM_SRGB">PZ titan beetle</option>
    </enum>

    <enum name="DdsTypeCoaster" storage="ubyte">
		maps the OVL's dds type to name of compression format
		<option value="74" name="DXGI_FORMAT_D24_UNORM_S8_UINT">ZTUAC ele heights textures</option>
		<option value="97" name="DXGI_FORMAT_BC1_UNORM"></option>
		<option value="98" name="DXGI_FORMAT_BC1_UNORM_SRGB"></option>
		<option value="99" name="DXGI_FORMAT_BC2_UNORM"></option>
		<option value="100" name="DXGI_FORMAT_BC2_UNORM_SRGB"></option>
		<option value="101" name="DXGI_FORMAT_BC3_UNORM"></option>
		<option value="102" name="DXGI_FORMAT_BC3_UNORM_SRGB"></option>
		<option value="103" name="DXGI_FORMAT_BC4_UNORM"></option>
		<option value="104" name="DXGI_FORMAT_BC4_SNORM"></option>
		<option value="105" name="DXGI_FORMAT_BC5_UNORM"></option>
		<option value="106" name="DXGI_FORMAT_BC5_SNORM"></option>

		<option value="121" name="DXGI_FORMAT_BC4_UNORM_B"></option>
		<option value="126" name="DXGI_FORMAT_BC7_UNORM"></option>
		<option value="127" name="DXGI_FORMAT_BC7_UNORM_SRGB"></option>

		<option value="250" name="DXGI_FORMAT_ALL"></option>
    </enum>

    <bitfield name="VersionInfo" storage="uint">
        Determines the format of the OVL file held by a mesh.
        n.b. pos counts from the end!
        <member width="1" pos="2" name="unk1" type="bool"></member>
        <member width="1" pos="4" name="unk2" type="bool"></member>
        <member width="1" pos="7" name="use zlib" type="bool"></member>
        <member width="1" pos="9" name="use oodle" type="bool"></member>
        <member width="1" pos="13" name="unk3" type="bool"></member>
        <member width="1" pos="14" name="is jwe" type="bool"></member>
    </bitfield>

	<compound name="Header3Data0" >
		Data struct for headers of type 3, read by data 0 of 3,7 frag.
		16 bytes
		<add name="zeros" type="uint64" >32 bytes, all 0</add>
		<add name="compression type" type="DdsType">flag, not direct index into DDS enum</add>
		<add name="one 0" type="ubyte">0 or 1</add>
		<add name="one 1" type="ubyte">1 or 2</add>
		<add name="one 2" type="ubyte">1 or 2</add>
		<add name="pad" type="uint">0</add>
    </compound>

	<compound name="Header3Data0Pc" >
		Data struct for headers of type 3, read by data 0 of 3,7 frag.
		16 bytes
		<add name="zeros" type="uint64" >8 bytes, all 0</add>
		<add name="compression type" type="DdsType_Coaster">flag, not direct index into DDS enum</add>
		<add name="one 0" type="ubyte">0 or 1</add>
		<add name="one 1" type="ubyte">1 or 2</add>
		<add name="one 2" type="ubyte">1 or 2</add>
		<add name="pad" type="uint">0, might be first 4 bytes of tex buffer for ztuac</add>
    </compound>

	<compound name="Header3Data1" >
		Part of a fragment, repeated for count of texture LODs / buffers.
		Data struct for headers of type 3
		24 bytes per texture buffer
		<add name="data size previous" type="uint64">Size of previous tex buffer</add>
		<add name="data size" type="uint64">Size of this tex buffer</add>
		<add name="unkn" type="uint64">is also related to data size</add>
    </compound>

	<compound name="Header3Data1Pc" >
		Data struct for headers of type 7
		<add name="width" type="ushort"></add>
		<add name="height" type="ushort" > </add>
		<add name="array size" type="ushort">may be depth</add>
		<add name="num mips" type="ushort">num_mips</add>
    </compound>

	<compound name="Header3Data1ZTUAC" >
		Data struct for headers of type 7
		<add name="lods" type="Header3Data1ZTUACEntry" arr1="#ARG#"></add>
		<add name="data size" type="ushort">?not sure if this isn't just junk data</add>
        is something remains, it seems to be padding!
    </compound>

	<compound name="Header3Data1ZTUACEntry" >
		Data struct for headers of type 7
		<add name="width" type="ushort">x</add>
		<add name="height" type="ushort" >y</add>
		<add name="num mips" type="ushort">num_mips</add>
    </compound>

	<compound name="Header7Data1" >
		Data struct for headers of type 7
		<add name="zero" type="uint64">zero</add>
		<add name="data size" type="uint" >total dds buffer size</add>
		<add name="width" type="uint">x size in pixels</add>
		<add name="height" type="uint" >y size in pixels</add>
		<add name="depth" type="uint" >aka tile_width; may be depth</add>
		<add name="array_size" type="uint">aka tile_height; may be array_size</add>
		<add name="num mips" type="uint">amount of mip map levels</add>
		<add name="pad" type="byte" >skipped by barbasol</add>
		<add name="unk_pz" type="uint64" vercond="#PZ#">only found in PZ</add>
		<add name="mip maps" type="Header7MipmapInfo" arr1="num mips">info about mip levels</add>
    </compound>

	<compound name="Header7MipmapInfo" >
		Data struct for one mipmap, part of a data 1 struct in headers of type 7
		<add name="offset" type="uint">cumulative sum of the preceding values</add>
		<add name="width" type="uint" >not pixels</add>
		<add name="height" type="uint">not pixels</add>
		<add name="unknown0C" type="uint" >decreases quadratically</add>
		<add name="unkn3" type="uint">repeat of height or width</add>
    </compound>

</fileformat>

